@page "/todo"
@using ToDoList.Shared
@using ToDoList.Client.Components
@inject IJSRuntime JSRuntime

<style>
    #container {
        width: 100%;
        display: inline-block !important;
        margin: auto;
        padding: 10px;
    }

    .pin {
        align-self: center;
        visibility: hidden;
        cursor: pointer;
        position: absolute;
        top: 1px;
        right: 1px;
    }

    .item:hover .pin {
        visibility: visible;
    }

/*    .card-title:focus + div .pin {
        background-color:red;
        color:pink;
    }*/

    .card-title:focus ~ .pin {
        visibility: hidden;
    }

    .item {
        width: 270px !important;
        box-shadow: 0 4px 5px 0 rgba(0,0,0,0.14), 0 1px 10px 0 rgba(0,0,0,0.12), 0 2px 4px -1px rgba(0,0,0,0.3)
    }

    @@media only screen and (max-width: 768px) {
        .item {
            width: 100% !important;
        }
    }
</style>

<div id="main" @onclick="AddCard">
    <div class="col-md-4" style="margin:0 auto;" @onkeyup="@(e => AddCard(e))">
        <div class="card">
            <div class="card-container">
                <div class="card-header">
                    @if (!string.IsNullOrEmpty(tempCard.Title))
                    {
                        <h3 contenteditable="true">@tempCard.Title</h3>
                    }
                </div>
                <div class="card-body">
                    <ul style="list-style: none;padding:0;">
                        @if (tempCard.Items != null)
                        {
                            @foreach (var item in tempCard.Items)
                            {
                                <li>
                                    <input type="checkbox" @bind="item.IsDone" />
                                    @if (item.IsDone)
                                    {
                                        <del>@item.Task</del>
                                    }
                                    else
                                    {
                                        @item.Task
                                    }
                                </li>
                            }
                        }
                    </ul>
                </div>
                <input style="width:100%;" placeholder="@inputPlaceHolder" @bind="newTodo" @onkeyup="@(e => AddItem(e))" @onclick:stopPropagation="true" />
            </div>
        </div>
    </div>

    @*Card Component*@
    <div id="container">
        @if (pinnedCard != null && pinnedCard.IsPinned)
        {
            <div class="row main-pin" style="justify-content:center;padding:10px;">
                <ToDoCard card="@pinnedCard" OnDeleteClicked="RemoveCard" isPinnedComponent="true" />
            </div>
        }

        <div id="items-wrapper" class="wrapper">
            @for (int i = 0; i < cardLst.Count; i++)
            {
                if (cardLst[i].IsPinned == false)
                {
                    <ToDoCard card="@cardLst[i]" cardIndex="@i" isPinnedComponent="false" OnDeleteClicked="RemoveCard" OnPushPinClicked="PushPin" />
                }
            }
        </div>
    </div>
    @*End*@
</div>

@code{
    //Temp Card
    private TodoCardModel tempCard = new TodoCardModel();
    public string cardTitle { get; set; }
    private string newTodo { get; set; }
    //end

    private int pinnedIndex { get; set; } = -1;

    private TodoCardModel pinnedCard { get; set; }

    private int cardNo { get; set; } = 0;
    private string inputPlaceHolder = "Title";

    private List<TodoCardModel> cardLst = new List<TodoCardModel>();
    private List<TodoItemModel> itemLst = new List<TodoItemModel>();


    private void RemoveCard(int index)
    {
        cardLst.RemoveAt(index);
        if (index == pinnedIndex)
        {
            ResetPinnedIndex();
        }
    }

    private void PushPin(int index)
    {
        if (IsAlreadyPinned(index) == false)
        {
            if (pinnedIndex >= 0) //
            {
                cardLst[pinnedIndex].IsPinned = false; // give false to former pinned index
            }
            pinnedIndex = index;
            pinnedCard = cardLst[index];
        }
    }

    private void ResetPinnedIndex()
    {
        pinnedIndex = -1;
    }

    private bool IsAlreadyPinned(int indexToBePinned)
    {
        var result = (pinnedIndex == indexToBePinned) ? true : false;
        return result;
    }

    private void AddItem(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (string.IsNullOrEmpty(tempCard.Title))
            {
                tempCard.Title = newTodo;
                inputPlaceHolder = "I will do this....";
            }
            else
            {
                tempCard.Items.Add(new TodoItemModel() { Task = newTodo });
            }
            newTodo = null;
        }
    }

    private void AddCard(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            if (!string.IsNullOrWhiteSpace(tempCard.Title))
            {
                cardLst.Add(new TodoCardModel() { Title = tempCard.Title, CardNo = cardNo++, Items = tempCard.Items, });
                // reset tempCard
                tempCard.Title = string.Empty;
                inputPlaceHolder = "Title";
                tempCard.Items = new List<TodoItemModel>();
            }
        }
    }

    private void AddCard(MouseEventArgs m)
    {
        if (!string.IsNullOrWhiteSpace(tempCard.Title))
        {
            cardLst.Add(new TodoCardModel() { Title = tempCard.Title, CardNo = cardNo++, Items = tempCard.Items });
            Console.WriteLine("Added to list");
            // reset tempCard
            tempCard.Title = string.Empty;
            inputPlaceHolder = "Title";
            tempCard.Items = new List<TodoItemModel>();
        }
    }
}


