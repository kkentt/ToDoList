@page "/ToDoCard"
@using ToDoList.Shared
@inject IJSRuntime JSRuntime

@*<style>
    .pin {
        align-self: center;
        visibility: hidden;
        cursor: pointer;
    }

    .item:hover .pin {
        visibility: visible;
    }

    .item {
        background: rgb(135, 199, 135);
        width: 200px !important;
        /*height:auto !important;*/
        /**/
    }

</style>*@

    <div class="item">
        <div class="pin">
            <span class="material-icons">
                push_pin
            </span>
        </div>
        <h3> @card.Title          @*@card.Card.Count(x => x.IsDone)*@</h3>
        <ul style="list-style: none; padding:10px;">
            @foreach (var item in card.Items)
            {
                <li>
                    <div style="display:flex; width:100%;">
                        <div>
                            <input type="checkbox" @bind="item.IsDone" />
                        </div>
                        @if (item.IsDone)
                        {
                            <div contenteditable="true" style="width:inherit;"><s>@item.Task</s></div>
                        }
                        else
                        {
                            <div contenteditable="true" style="width:inherit">@item.Task</div>
                        }
                    </div>
                </li>
            }
            <li>
                <input style="width:100%;" placeholder="Something todo" @bind="newTodo" @onkeyup="(e => AddToDo(e))" @onclick:stopPropagation="true" />
            </li>
        </ul>
        <div>
            <input type="color" class="color-picker" id="@colorPickerId" @bind="cardColor" style="width: 0;height: 0; visibility:hidden" />
            <span class="material-icons" @onclick="() => OpenColorPicker(colorPickerId)" style="cursor: pointer;">
                color_lens
            </span>
        </div>
    </div>



@code {

    private string newTodo;
    private string cardColor;
    public string Title { get; set; }
    public List<TodoItemModel> itemLst = new List<TodoItemModel>();

    [Parameter]
    public TodoCardModel card { get; set; }

    private string colorPickerId { get { return "colorPicker" + card.CardNo; } }



    public List<TodoCardModel> cardLst = new List<TodoCardModel>();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        ActivateMagicGrid();
        //colorPickerId = "colorPicker" + cardNo;
    }

    private void ActivateMagicGrid()
    {
        //JSRuntime.InvokeVoidAsync(
        //      "UIJsLibraryFunctions.activateFreeWall",
        //      "container");

        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.activateMagicGrid");
        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.initializeColorPickerEvent");
    }
    private void OpenColorPicker(string colorPickerId)
    {
        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.openColorPicker", colorPickerId);
    }

    private void AddToDo(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(newTodo))
            {
                card.Items.Add(new TodoItemModel { Task = newTodo });
                newTodo = string.Empty;
            }
        }
    }
}

