@page "/ToDoCard"
@using ToDoList.Shared
@inject IJSRuntime JSRuntime

    <div class="item" style="background-color:@cardColor">
        @*removed card cls to test and width 300px and bgcolor*@
        <h3 style="padding-left:10px;"> @card.Title          @*@card.Card.Count(x => x.IsDone)*@</h3>
        <ul style="list-style: none; padding:10px;">
            @foreach (var item in card.Items)
            {
                <li>
                    <input type="checkbox" @bind="item.IsDone" />
                    @if (item.IsDone)
                    {
                        <del>@item.Task</del>
                    }
                    else
                    {
                        @item.Task
                    }
                </li>
            }
            <li>
                <input style="width:100%;" placeholder="Something todo" @bind="newTodo" @onkeyup="(e => AddToDo(e))" @onclick:stopPropagation="true" />
            </li>
        </ul>
        <div>
            <input type="color" id="colorItem" @bind="cardColor"  style="width: 0;height: 0; visibility:hidden" />
            <span class="material-icons" id="colorPicker" @onclick="TriggerColorPicker" style="cursor: pointer;">color_lens</span>
            <!-- use inputs so users can set colors with text -->
            @*<i class="material-icons color-button">color_lens</i>*@

            <!-- anchors can be buttons -->
            @*<button class="color-button">Select color</button>*@

            <!-- anchors can be any element -->
            @*<span class="current-color">Current color</span>*@
        </div>
    </div>

@code {

    private string newTodo;
    private string cardColor;
    public string Title { get; set; }
    public List<TodoItemModel> itemLst = new List<TodoItemModel>();

    [Parameter]
    public TodoCardModel card { get; set; }

    public List<TodoCardModel> cardLst = new List<TodoCardModel>();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        ActivateMagicGrid();
        ActivateColorPicker();
    }

    private void ActivateColorPicker()
    {
        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.activateColorPicker");
        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.getColor");
    }
    private void ActivateMagicGrid()
    {
        //JSRuntime.InvokeVoidAsync(
        //      "UIJsLibraryFunctions.activateFreeWall",
        //      "container");

        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.activateMagicGrid");
    }
    private void TriggerColorPicker() 
    {
        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.openColorPicker");
    }


    private void AddToDo(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(newTodo))
            {
                card.Items.Add(new TodoItemModel { Task = newTodo });
                newTodo = string.Empty;
            }
        }
    }
}
