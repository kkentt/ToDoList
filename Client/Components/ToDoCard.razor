@page "/ToDoCard"
@using ToDoList.Shared
@inject IJSRuntime JSRuntime


<div class="item" @ref="cardRef" style="border-radius:10px; background-color: @card.BackgroundColor; color:@card.TextColor; ">
    <div class="pin">
        <span class="material-icons" @onclick="() => PushPin(cardIndex)">
            push_pin
        </span>
    </div>
    <h3 style="text-align:center;padding-top:10px;" contenteditable="true"> @card.Title          @*@card.Card.Count(x => x.IsDone)*@</h3>
    <ul style="list-style: none; padding:10px;">
        @foreach (var item in card.Items)
        {
            <li>
                <div style="display:flex; width:100%;">
                    <div>
                        <style>
                            .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true]) ~ .mdc-checkbox__background
                            {
                                background-color:white !important;
                            }
                        </style>
                        <MatCheckbox @bind-Value="item.IsDone"></MatCheckbox>
                    </div>
                    @if (item.IsDone)
                    {
                        <div contenteditable="true" style="display:flex;flex-direction:column; justify-content:center; width:inherit;padding-left:10px;"><s>@item.Task</s></div>
                    }
                    else
                    {
                        <div contenteditable="true" style="display: flex; flex-direction: column; justify-content:center; width: inherit; padding-left: 10px;">@item.Task</div>
                    }
                </div>
            </li>
        }
    <li>
        <MatTextField  FullWidth="true"  PlaceHolder=" Let's do this"  @bind-Value="@newTodo"  @onkeyup="(e => AddToDo(e))" @onclick:stopPropagation="true"></MatTextField>

        @*<input type="text" style="width:100%;" placeholder="Something todo" @bind="newTodo" @onkeyup="(e => AddToDo(e))" @onclick:stopPropagation="true" />*@
    </li>
    </ul>
    <div>
        <input type="color" class="color-picker" id="@colorPickerId" @bind="card.TextColor" style="width: 0;height: 0; visibility:hidden" />
        <span class="material-icons" @onclick="() => OpenColorPicker(colorPickerId)" style="cursor: pointer;">
            color_lens
        </span>
        <span class="material-icons" style="cursor: pointer;" @onclick="() => DeleteCard(cardIndex)" data-card-index="@cardIndex">
            delete
        </span>
    </div>
</div>



@code {

    public bool isPinned { get; set; } = false;
    ElementReference cardRef;
    private string newTodo;
    public string Title { get; set; }
    public List<TodoItemModel> itemLst = new List<TodoItemModel>();

    [Parameter]
    public bool isPinnedComponent { get; set; }
    [Parameter]
    public TodoCardModel card { get; set; }

    [Parameter]
    public int cardIndex { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteClicked { get; set; }

    [Parameter]
    public EventCallback<int> OnPushPinClicked { get; set; }

    private string colorPickerId { get { return "colorPicker" + card.CardNo; } }

    public List<TodoCardModel> cardLst = new List<TodoCardModel>();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            InitializeColorPickerEvent(cardRef);
        }
        ActivateMagicGrid();
    }

    protected override void OnInitialized()
    {
    }

    private void InitializeColorPickerEvent(ElementReference cardRef)
    {

        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.initializeColorPickerEvent", cardRef);

    }
    private void ActivateMagicGrid()
    {
        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.activateMagicGrid");
    }
    private void OpenColorPicker(string colorPickerId)
    {
        JSRuntime.InvokeVoidAsync("UIJsLibraryFunctions.openColorPicker", colorPickerId, DotNetObjectReference.Create(this));
    }

    private void AddToDo(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(newTodo))
            {
                card.Items.Add(new TodoItemModel { Task = newTodo });
                newTodo = string.Empty;
            }
        }
    }

    private void DeleteCard(int cardIndex)
    {
        OnDeleteClicked.InvokeAsync(cardIndex);
    }

    private void PushPin(int cardIndex)
    {
        card.IsPinned = !card.IsPinned;
        OnPushPinClicked.InvokeAsync(cardIndex);
    }

    [JSInvokable]
    public void SetBackgroundColor(string backgroundColor, string textColor)
    {
        Console.Write(backgroundColor);
        card.BackgroundColor = backgroundColor;
        card.TextColor = textColor;

        StateHasChanged();
    }
}

